#   patch.gsl
#
#   Generate Perl patch script from patch.xml specifications.
#   See patch.txt for explanation of use.  Requires GSL/3.x.
#
#   Copyright (c) 2003 iMatix Corporation
#
#   ------------------ GPL Licensed Source Code ------------------
#   iMatix makes this software available under the GNU General
#   Public License (GPL) license for open source projects.  For
#   details of the GPL license please see www.gnu.org or read the
#   file license.gpl provided in this package.
#   
#   This program is free software; you can redistribute it and/or
#   modify it under the terms of the GNU General Public License as
#   published by the Free Software Foundation; either version 2 of
#   the License, or (at your option) any later version.
#   
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#   
#   You should have received a copy of the GNU General Public
#   License along with this program in the file 'license.gpl'; if
#   not, write to the Free Software Foundation, Inc., 59 Temple
#   Place - Suite 330, Boston, MA 02111-1307, USA.
#   
#   You can also license this software under iMatix's General Terms
#   of Business (GTB) for commercial projects.  If you have not
#   explicitly licensed this software under the iMatix GTB you may
#   only use it under the terms of the GNU General Public License.
#   
#   For more information, send an email to info@imatix.com.
#   --------------------------------------------------------------

xml from "patches.xml"
for patches

.template
.output "patch"
#   Generated patch program
$output = "patch.tmp";
.for class where name <> "default"
.   for patches.class as parent where name = class.class?"default"
.       for . as child
.           copy child to class
.       endfor
.   endfor
.endfor
.for file
.   if count (patches.file, count.name = file.name, count) > 1
.       abort "$(file.name) is specified more than once"
.   endif
.   for patches.class where name = file.class?"default"
.       for . as child
.           copy child to file
.       endfor
.   endfor

#   Patch $(file.name)
#
$filename = "$(file.name)";
.   if action ?= "delete"
unlink ($filename);
.   else
open (INPUT, $filename)   || die "Can't open $filename: $!";
open (OUTPUT, ">$output") || die "Can't create $output: $!";
$changes = 0;

while (<INPUT>) {
.-
.-  <global> patches
.-
.   for global
.       if !defined ([from]) | !defined ([to])
.           abort "Syntax error: please use <global from= to= />"
.       endif
.       [from] = string.replace ([from], "/|\\/,(|\\(,)|\\)")
.       [to]   = string.replace ([to],   "/|\\/,(|\\(,)|\\)")
.       if [from] = [to]
.           abort "Identical from and to ($([from])) will cause patch to loop"
.       endif
.       if string ?= 1
    if (/("[^"]*)$([from]:)([^"]*")/) {
        s/("[^"]*)$([from]:)([^"]*")/$1$([to]:)$2/g;
        $changes++;
        redo;
    }
.       else
    if (/$([from]:)/) {
        s/$([from]:)/$([to]:)/g;
        $changes++;
        redo;
    }
.       endif
.   endfor
.-
.-  <delete> patches
.-
.   for delete
.       if defined ([from])
.           if !defined (until)
.               [delete].until = [delete].[from]
.           endif
.           [from]  = string.replace ([from],  "/|\\/")
.           [until] = string.replace ([until], "/|\\/")
    if (/$([from]:)/) {
        $changes++;
.           if defined ([after])
.               [after] = string.replace ([after]?"", "/|\\/")
        $end_marker = 0;
.           endif
.           if defined ([after]) | [until] <> [from]
        while (<INPUT>) {
.               if defined ([after])
            $end_marker = 1 if /$([after]:)/;
            last if /$([until]:)/ && $end_marker;
.               else
            last if /$([until]:)/;
.               endif
        }
.           endif
        next;
    }
.       else
    while (<INPUT>) {};                 #   Skip entire file
.       endif
.   endfor
.-
.-  <insert> patches
.-
.   for insert
.       if defined ([before])
.           [before] = string.replace ([before], "/|\\/")
    if (/$([before]:)/) {
        $changes++;
        print OUTPUT << "-=END=-";
$(string.trim (insert.):)
-=END=-
    }
.       elsif defined ([after])
.           [after] = string.replace ([after], "/|\\/")
    if (/$([after]:)/) {
        print OUTPUT $_ if $_;
        $changes++;
        print OUTPUT << "-=END=-";
$(string.trim (insert.):)
-=END=-
        next;
    }
.       else
        print OUTPUT $_ if $_;
    $changes++;
    print OUTPUT << "-=END=-";
$(string.trim (insert.):)
-=END=-
.       endif
.   endfor
    print OUTPUT $_ if $_;
}
close INPUT;
close OUTPUT;
if ($changes) {
    print "$changes changes to $filename\\n";
    unlink $filename;
    rename $output, $filename;
}
else {
    unlink $output;
}
.   endif
.endfor
.endtemplate

endfor
