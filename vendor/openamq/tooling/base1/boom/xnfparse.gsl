#   'Parse' engine for xnf
#
#   Generated by iMatix GSLgen
#   For copyright and license please see project license.
#

function xnf_parse_xnf (tag)
    if !defined (.[name])
        xnf_parse_error ("Required attribute 'name' not defined in xnf")
    endif
    #    Check that all entities are valid here
    for . as entity
        if    name () = "include"
        elsif name () = "entity"
        elsif name () = "class"
        elsif name () = "function"
        elsif name () = "errorhandler"
        else
            xnf_parse_error ("<$(name ())> not allowed in xnf")
        endif
    endfor

    #    Process each set of entities separately
    for [include]
        xnf_parse_include ('include')
    endfor
    for [entity]
        xnf_parse_entity ('entity')
    endfor
    for [class]
        xnf_parse_class ('class')
    endfor
    for [function]
        xnf_parse_function ('function')
    endfor
    for [errorhandler]
        xnf_parse_errorhandler ('errorhandler')
    endfor
endfunction

function xnf_parse_include (tag)
    if !defined (.[filename])
        xnf_parse_error ("Required attribute 'filename' not defined in include")
    endif
    for .
        xnf_parse_error ("<$(name ())> not allowed in include")
    endfor
endfunction

function xnf_parse_entity (tag)
    if !defined (.[name])
        xnf_parse_error ("Required attribute 'name' not defined in entity")
    endif
    if (.[cdata]?"") = ""
        .[cdata] = "0"
    endif
    if defined (.[cdata])
        if    .[cdata] ?= "0"
        elsif .[cdata] ?= "1"
        else
            xnf_parse_error ("Attribute 'cdata' has illegal value '$(.[cdata]?)' in entity")
        endif
    endif
    xnf_parse_entity_element ('entity')
endfunction

function xnf_parse_class (tag)
    xnf_parse_entity_element ('class')
endfunction

function xnf_parse_entity_element (tag)
    if count (body) > 1
        xnf_parse_error ("more than one <body> defined in $(tag)")
    endif
    if count (rule) > 1
        xnf_parse_error ("more than one <rule> defined in $(tag)")
    endif
    #    Check that all entities are valid here
    for . as entity
        if    name () = "allow"
        elsif name () = "body"
        elsif name () = "rule"
        elsif name () = "attr"
        else
            xnf_parse_error ("<$(name ())> not allowed in $(tag)")
        endif
    endfor

    #    Process each set of entities separately
    for [allow]
        xnf_parse_allow ('allow')
    endfor
    for [body]
        xnf_parse_body ('body')
    endfor
    for [rule]
        xnf_parse_rule ('rule')
    endfor
    for [attr]
        xnf_parse_attr ('attr')
    endfor
endfunction

function xnf_parse_body (tag)
    if !defined (.[entity])
        xnf_parse_error ("Required attribute 'entity' not defined in body")
    endif
    for .
        xnf_parse_error ("<$(name ())> not allowed in body")
    endfor
endfunction

function xnf_parse_allow (tag)
    if !defined (.[entity])
        xnf_parse_error ("Required attribute 'entity' not defined in allow")
    endif
    if (.[occurs]?"") = ""
        .[occurs] = "0+"
    endif
    if defined (.[occurs])
        if    .[occurs] ?= "1"
        elsif .[occurs] ?= "1+"
        elsif .[occurs] ?= "0+"
        elsif .[occurs] ?= "0/1"
        else
            xnf_parse_error ("Attribute 'occurs' has illegal value '$(.[occurs]?)' in allow")
        endif
    endif
    for .
        xnf_parse_error ("<$(name ())> not allowed in allow")
    endfor
endfunction

function xnf_parse_rule (tag)
    if (.[disconnect]?"") = ""
        .[disconnect] = "0"
    endif
    if defined (.[disconnect])
        if    .[disconnect] ?= "0"
        elsif .[disconnect] ?= "1"
        else
            xnf_parse_error ("Attribute 'disconnect' has illegal value '$(.[disconnect]?)' in rule")
        endif
    endif
    if (.[when]?"") = ""
        .[when] = "before"
    endif
    if defined (.[when])
        if    .[when] ?= "before"
        elsif .[when] ?= "after"
        else
            xnf_parse_error ("Attribute 'when' has illegal value '$(.[when]?)' in rule")
        endif
    endif
    for .
        xnf_parse_error ("<$(name ())> not allowed in rule")
    endfor
endfunction

function xnf_parse_attr (tag)
    if (.[required]?"") = ""
        .[required] = "0"
    endif
    if defined (.[required])
        if    .[required] ?= "0"
        elsif .[required] ?= "1"
        else
            xnf_parse_error ("Attribute 'required' has illegal value '$(.[required]?)' in attr")
        endif
    endif
    #    Check that all entities are valid here
    for . as entity
        if    name () = "restrict"
        else
            xnf_parse_error ("<$(name ())> not allowed in attr")
        endif
    endfor

    #    Process each set of entities separately
    for [restrict]
        xnf_parse_restrict ('restrict')
    endfor
endfunction

function xnf_parse_restrict (tag)
    if !defined (.[value])
        xnf_parse_error ("Required attribute 'value' not defined in restrict")
    endif
    for .
        xnf_parse_error ("<$(name ())> not allowed in restrict")
    endfor
endfunction

function xnf_parse_function (tag)
    for .
        xnf_parse_error ("<$(name ())> not allowed in function")
    endfor
endfunction

function xnf_parse_errorhandler (tag)
    for .
        xnf_parse_error ("<$(name ())> not allowed in errorhandler")
    endfor
endfunction

function xnf_parse_error (message)
    echo (my.message)
endfunction
