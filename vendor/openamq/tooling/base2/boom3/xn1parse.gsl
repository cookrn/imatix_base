#   'Parse' engine for xn1
#
#   Generated by iMatix GSLgen
#   For copyright and license please see project license.
#

function xn1_parse_xn1 (tag)
    if !defined (0.[name])
        xn1_parse_error ("Required attribute 'name' not defined in xn1")
    endif
    #    Check that all entities are valid here
    for . where defined (name ()) as entity
        if    name () = "include"
        elsif name () = "entity"
        elsif name () = "class"
        elsif name () = "function"
        elsif name () = "errorhandler"
        else
            xn1_parse_error ("<$(name ())> not allowed in xn1")
        endif
    endfor

    #    Process each set of entities separately
    for [include]
        xn1_parse_include ('include')
    endfor
    for [entity]
        xn1_parse_entity ('entity')
    endfor
    for [class]
        xn1_parse_class ('class')
    endfor
    for [function]
        xn1_parse_function ('function')
    endfor
    for [errorhandler]
        xn1_parse_errorhandler ('errorhandler')
    endfor
endfunction

function xn1_parse_include (tag)
    if !defined (0.[filename])
        xn1_parse_error ("Required attribute 'filename' not defined in include")
    endif
    for . where defined (name ())
        xn1_parse_error ("<$(name ())> not allowed in include")
    endfor
endfunction

function xn1_parse_entity (tag)
    if !defined (0.[name])
        xn1_parse_error ("Required attribute 'name' not defined in entity")
    endif
    if (0.[cdata]?"") = ""
        0.[cdata] = "0"
    endif
    if defined (0.[cdata])
        if    0.[cdata] ?= "0"
        elsif 0.[cdata] ?= "1"
        else
            xn1_parse_error ("Attribute 'cdata' has illegal value '$(0.[cdata]?)' in entity")
        endif
    endif
    xn1_parse_entity_element ('entity')
endfunction

function xn1_parse_class (tag)
    xn1_parse_entity_element ('class')
endfunction

function xn1_parse_entity_element (tag)
    if count (body) > 1
        xn1_parse_error ("more than one <body> defined in entity-element")
    endif
    if count (rule) > 1
        xn1_parse_error ("more than one <rule> defined in entity-element")
    endif
    #    Check that all entities are valid here
    for . where defined (name ()) as entity
        if    name () = "allow"
        elsif name () = "body"
        elsif name () = "rule"
        elsif name () = "attr"
        else
            xn1_parse_error ("<$(name ())> not allowed in entity-element")
        endif
    endfor

    #    Process each set of entities separately
    for [allow]
        xn1_parse_allow ('allow')
    endfor
    for [body]
        xn1_parse_body ('body')
    endfor
    for [rule]
        xn1_parse_rule ('rule')
    endfor
    for [attr]
        xn1_parse_attr ('attr')
    endfor
endfunction

function xn1_parse_body (tag)
    if !defined (0.[entity])
        xn1_parse_error ("Required attribute 'entity' not defined in body")
    endif
    for . where defined (name ())
        xn1_parse_error ("<$(name ())> not allowed in body")
    endfor
endfunction

function xn1_parse_allow (tag)
    if !defined (0.[entity])
        xn1_parse_error ("Required attribute 'entity' not defined in allow")
    endif
    if (0.[occurs]?"") = ""
        0.[occurs] = "0+"
    endif
    if defined (0.[occurs])
        if    0.[occurs] ?= "1"
        elsif 0.[occurs] ?= "1+"
        elsif 0.[occurs] ?= "0+"
        elsif 0.[occurs] ?= "0/1"
        else
            xn1_parse_error ("Attribute 'occurs' has illegal value '$(0.[occurs]?)' in allow")
        endif
    endif
    for . where defined (name ())
        xn1_parse_error ("<$(name ())> not allowed in allow")
    endfor
endfunction

function xn1_parse_rule (tag)
    if (0.[disconnect]?"") = ""
        0.[disconnect] = "0"
    endif
    if defined (0.[disconnect])
        if    0.[disconnect] ?= "0"
        elsif 0.[disconnect] ?= "1"
        else
            xn1_parse_error ("Attribute 'disconnect' has illegal value '$(0.[disconnect]?)' in rule")
        endif
    endif
    if (0.[when]?"") = ""
        0.[when] = "before"
    endif
    if defined (0.[when])
        if    0.[when] ?= "before"
        elsif 0.[when] ?= "after"
        else
            xn1_parse_error ("Attribute 'when' has illegal value '$(0.[when]?)' in rule")
        endif
    endif
    for . where defined (name ())
        xn1_parse_error ("<$(name ())> not allowed in rule")
    endfor
endfunction

function xn1_parse_attr (tag)
    if (0.[required]?"") = ""
        0.[required] = "0"
    endif
    if defined (0.[required])
        if    0.[required] ?= "0"
        elsif 0.[required] ?= "1"
        else
            xn1_parse_error ("Attribute 'required' has illegal value '$(0.[required]?)' in attr")
        endif
    endif
    #    Check that all entities are valid here
    for . where defined (name ()) as entity
        if    name () = "restrict"
        else
            xn1_parse_error ("<$(name ())> not allowed in attr")
        endif
    endfor

    #    Process each set of entities separately
    for [restrict]
        xn1_parse_restrict ('restrict')
    endfor
endfunction

function xn1_parse_restrict (tag)
    if !defined (0.[value])
        xn1_parse_error ("Required attribute 'value' not defined in restrict")
    endif
    for . where defined (name ())
        xn1_parse_error ("<$(name ())> not allowed in restrict")
    endfor
endfunction

function xn1_parse_function (tag)
    for . where defined (name ())
        xn1_parse_error ("<$(name ())> not allowed in function")
    endfor
endfunction

function xn1_parse_errorhandler (tag)
    for . where defined (name ())
        xn1_parse_error ("<$(name ())> not allowed in errorhandler")
    endfor
endfunction

function xn1_parse_error (message)
    echo (my.message)
endfunction
